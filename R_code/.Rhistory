plot(svmfit2,dat)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges=list(cost=c(0.001,0.01,0.1,5,10,100)))
summary tune.out
summary(tune.out)
bestmod=tune.out$best.model
summary(bestmod)
plot(bestmod,dat)
xtest=matrix(rnorm(20*2),ncol=2)
ytest=sample(c(-1,1),20,rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,]+1
testdat=data.frame(x=xtest,y=as.factor(ytest))
ypred=predict(bestmod,data=testdat)
table(predict=ypred,truth=testdat$y)
ypred2=predict(svmfit,testdat)
table(predict=ypred2,truth=testdat$y)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
y=c(rep(1,150),rep(2,50))
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
dat=data.frame(x=x,y=as.factor(y))
plot(x,col=y)
train=sample(1:200,100,replace=FALSE)
train
svmfit=svm(y[train]~.,data=dat,kernel="radial",gamma=1,cost=1)
svmfit=svm(y[train]~.,data=dat[train,],kernel="radial",gamma=1,cost=1)
plot(svmfit,dat[train,])
svmfit=svm(y~.,data=dat[train,],kernel="radial",gamma=1,cost=1)
plot(svmfit,dat[train,])
tune.out=tune(svm,y~.,data=dat[train,],kernel="radial",ranges=list(cost=c(0.1,1,10,100,1000),
gamma=c(0.5,1,2,3,4)))
summary(tune.out)
ypred=predict(tune.out$best.model,dat[-train,])
table(predict=ypred,truth=y[train])
x=rbind(x,matrix(rnorm(50*2),ncol=2))
y=c(y,rep(0,50))
x[y==0,2]=x[y==0,2]+2
dat=data.frame(x=x,y=as.factor(y))
svmfit3=svm(y~.,data=dat,kernel="radial",cost=10,gamma=1)
plot(svmfit3,dat)
par(mfrow=c(2,1))
plot(x,col=(y+1))
plot(svmfit3,dat)
par(mfrow=c(2,1))
plot(x,col=(y+1))
plot(svmfit3,dat)
par(mfrow=c(2,1))
plot(x,col=(y+1))
plot(svmfit3,dat)
plot(x,col=(y+1))
plot(x,col=(y+1))
plot(svmfit3,dat)
plot(x,col=(y+1))
par(mfrow=c(1,1))
plot(x,col=(y+1))
plot(svmfit3,dat)
plot(x,col=(y+1))
plot(svmfit3,dat)
install.packages("USArrests")
data(USArrests)
library(base)
data(USArrests)
library(R)
install.packages("R")
install.packages("base64")
library(base64)
data(USArrests)
install.packages("R")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
data(USArrests)
set.seed(2)
x=matrix(rnorm(50*2),ncol=2)
x[1:25,1]=x[1:25,1]+3
x[1:25,2]=x[1:25,2]-4
13.1-(64.68-0.62*81.4)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x*y
sum(x*y)/sum(x*x)
install.packages("slidify")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
require(devtools)
install.packages("devtools")
load("~/Desktop/fall_2014/MCMT/mcmt_project/mcmt_project_data.RData")
View(europe3_rank)
bar_europe3=barplot(europe3[1:10,2],main="Flight Network 3: South Europe",names.arg=europe3[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= europe3[1:10,2]+0.003, x= bar_europe3, labels=as.character(round(europe3[1:10,2],digits=4)), xpd=TRUE)
bar_russia=barplot(russia[1:10,2],main="Flight Network 4: Former Soviet Union",names.arg=russia[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= russia[1:10,2]+0.003, x= bar_russia, labels=as.character(round(russia[1:10,2],digits=4)), xpd=TRUE)
View(russia_rank)
View(australia_rank)
bar_australia=barplot(australia[1:10,2],main="Flight Network 5: Australia,New Zealand",names.arg=australia[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= australia[1:10,2]+0.003, x= bar_australia, labels=as.character(round(australia[1:10,2],digits=4)), xpd=TRUE)
View(bar_europe6)
bar_europe6=barplot(europe6[1:10,2],main="Flight Network 6: North Europe",names.arg=europe3[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= europe6[1:10,2]+0.003, x= bar_europe6, labels=as.character(round(europe6[1:10,2],digits=4)), xpd=TRUE)
bar_europe3=barplot(europe3[1:10,2],main="Flight Network 3: South Europe",names.arg=europe3[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= europe3[1:10,2]+0.003, x= bar_europe3, labels=as.character(round(europe3[1:10,2],digits=4)), xpd=TRUE)
bar_europe6=barplot(europe6[1:10,2],main="Flight Network 6: North Europe",names.arg=europe6[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= europe6[1:10,2]+0.003, x= bar_europe6, labels=as.character(round(europe6[1:10,2],digits=4)), xpd=TRUE)
par(mfrow=c(4,2))
bar_usa=barplot(usa[1:10,2],main="Flight Network 1: United States,Canada,Mexico,Cuba,etc",names.arg=usa[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= usa[1:10,2]+0.003, x= bar_usa, labels=as.character(round(usa[1:10,2],digits=4)), xpd=TRUE)
bar_china=barplot(china[1:10,2],main="Flight Network 2: China,South Korea,Japan,Mariana,etc",names.arg=china[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= china[1:10,2]+0.003, x= bar_china, labels=as.character(round(china[1:10,2],digits=4)), xpd=TRUE)
bar_europe3=barplot(europe3[1:10,2],main="Flight Network 3: South Europe",names.arg=europe3[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= europe3[1:10,2]+0.003, x= bar_europe3, labels=as.character(round(europe3[1:10,2],digits=4)), xpd=TRUE)
bar_russia=barplot(russia[1:10,2],main="Flight Network 4: Former Soviet Union",names.arg=russia[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= russia[1:10,2]+0.003, x= bar_russia, labels=as.character(round(russia[1:10,2],digits=4)), xpd=TRUE)
bar_australia=barplot(australia[1:10,2],main="Flight Network 5: Australia,New Zealand",names.arg=australia[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= australia[1:10,2]+0.003, x= bar_australia, labels=as.character(round(australia[1:10,2],digits=4)), xpd=TRUE)
bar_europe6=barplot(europe6[1:10,2],main="Flight Network 6: North Europe",names.arg=europe6[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= europe6[1:10,2]+0.003, x= bar_europe6, labels=as.character(round(europe6[1:10,2],digits=4)), xpd=TRUE)
bar_india=barplot(india[1:10,2],main="Flight Network 7: India,United Arab Emirates",names.arg=india[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= india[1:10,2]+0.004, x= bar_india, labels=as.character(round(india[1:10,2],digits=4)), xpd=TRUE)
bar_brazil=barplot(brazil[1:10,2],main="Flight Network 8: Brazil",names.arg=brazil[1:10,1],xlab="airport",ylab="PageRank Value")
#text(y= brazil[1:10,2]+0.004, x= bar_brazil, labels=as.character(round(brazil[1:10,2],digits=4)), xpd=TRUE)
bar_europe6=barplot(europe6[1:10,2],main="Flight Network 6: North Europe",names.arg=europe6[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= europe6[1:10,2]+0.003, x= bar_europe6, labels=as.character(round(europe6[1:10,2],digits=4)), xpd=TRUE)
bar_europe6=barplot(europe6[1:10,2],main="Flight Network 6: North Europe",names.arg=europe6[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= europe6[1:10,2]+0.003, x= bar_europe6, labels=as.character(round(europe6[1:10,2],digits=4)), xpd=TRUE)
View(europe6_rank)
View(brazil_rank)
bar_brazil=barplot(brazil[1:10,2],main="Flight Network 8: Brazil",names.arg=brazil[1:10,1],xlab="airport",ylab="PageRank Value")
text(y= brazil[1:10,2]+0.004, x= bar_brazil, labels=as.character(round(brazil[1:10,2],digits=4)), xpd=TRUE)
library(MASS)
library(ISLR)
install.packages("ISLR")
library(ISLR)
fix(Boston)
lm.fit2=lm(medv~lstat+I(lstat^2),data=Boston)
plot(lm.fit2)
par(2,2)
plot(lm.fit2)
names(Smarket)
data(Smarket)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
coef(glm.fit)
summary(glm.fit)
glm.probs=predict(glm.fit,type='response')
glm.probs
install.packages("RSQLite")
install.packages("RSQLServer")
library(RSQLserver)
library(RSQLServer)
CREATE TABLE test
head(Boston)
train=(Smarket.Year<2005)
train=(Smarket.tear<2005)
head Smarket
head(Smarket)
train=(Smarket$Year<2005)
lda.fit=lda(Direction~Lag1+Lag2,data=Smarket,subset=train)
summary(lda.fit)
Smarket.2005=Smarket[!train,]
lda.fit
lda.pred=predict(lda.fit,Smarket.2005)
lda.pred
lda.fit$class
lda.pred$class
lda.pred$posterior
names(lda.pred$posterior)
head(lda.pred$posterior)
head(lda.pred$class)
library(leaps)
install.package(leaps)
install.packages("leaps")
library(leaps)
data(Hitters)
library(ISLR)
data(leaps)
data(Hitters)
Hitters=omit.na(Hitters)
Hitters=na.omit(Hitters)
regfit.full=regsubsets(Salary~.,data=Hitters,nvmax=19)
summary(regfit.full)
reg.summary=summary(regfit.full)
reg.summary$rsq
reg.summary$rss
plot(reg.summary$rss)
plot(reg.summary$adjr2)
coef(regfit.full,4)
coef(regfit.full,3)
train=sample(rep(TRUE,FALSE),nrow(Hitters),rep=TRUE)
train=sample(c(TRUE,FALSE),nrow(Hitters),rep=TRUE)
test=(!train)
regfit.best=regsubsets(Salary~.,data=Hitters[train,],nvmax=19)
test.mat=model.matrix(Salary~.,data=Hitters[test,])
test.mat
X=model.matrix(Salary~.,data=Hitters)[,-1]
y=Hitters$Salary
library(glmnet)
install.packages("glmnet")
library(glmnet)
ridge.mod=glmnet(X,y,alpha=0,lambda=10^seq(10,-2,length=100))
summary(ridge.mod)
coef(ridge.mod)
plot(ridge.mod)
ridge.pred=predict(ridge.mod,s=50)
ridge.pred=predict(ridge.mod,s=50,type="coeficients")
ridge.pred=predict(ridge.mod,s=50,type="coeficients")[1:20,]
predict(ridge.mod,s=50,type="coeficients")[1:20,]
predict(ridge.mod,s=50,type="coefficients")[1:20,]
predict(ridge.mod,s=50,type="coefficients")
predict(ridge.mod,s=50,type="rss")
predict(ridge.mod,s=50,type="rsq")
predict(ridge.mod,s=50,type="error")
predict(ridge.mod,s=50,newx=X[test,])
predict(ridge.mod,s=50)
predict(ridge.mod,s=50,X)
predict(ridge.mod,s=50,newx=Hitters[test,])
predict(ridge.mod,s=50,newx=X[test,],type="coefficients")
library(ISLR)
attach(Wage)
data(Wage)
fit=lm(wage~poly(age,4),data=Wage)
fit2=lm(wage~poly(age,4,raw=TRUE),data=Wage)
coef(fit)
coef(fit2)
plot(age,wage)
abline(fig)
abline(fit)
plot(fit)
plot(fit2)
?poly()
p=poly(age,4)
p2=poly(age,4,raw=T)
summary(p)
summary(p2)
range(age)
agelims=range(age)
age.grid=seq(from=agelims[1],to=agelims[2])
fit.log=glm(I(age>250)~poly(age,4),data=Wage,family=binomial)
preds=predict(fit.log,newdata=list(age=age.grid),se=T)
names(preds)
pres$fit
preds$fit
fit.log=glm(I(wage>250)~poly(age,4),data=Wage,family=binomial)
preds=predict(fit.log,newdata=list(age=age.grid),se=T)
preds$fit
preds$se.fit
exp(preds$fit)
preds.resp=predict(fit.log,newdata=list(age=age.grid),type='response')
preds.resp$fit
names(preds.resp)
preds.resp=predict(fit.log,newdata=list(age=age.grid),type='response',se=T)
preds.resp$fit
plot(preds.resp$fit)
install.packages('e1071')
library(e1071)
set.seed(1)
x=matrix(rnorm(20*2),ncol=2)
y=c(rep(-1,10),rep(1,10))
x[y==1,]=x[y==1,]+1
plot(x,col=3-y)
dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~.,data=dat,kernel='linear',cost=10,scale=F)
plot(svmfit,dat)
svmfit=svm(y~.,data=dat,kernel='gaussian',cost=10,scale=F)
svmfit=svm(y~.,data=dat,kernel='gauss',cost=10,scale=F)
svmfit=svm(y~.,data=dat,kernel='linear',cost=10,scale=T)
plot(svmfit,dat)
svmfit=svm(y~.,data=dat,kernel='linear',cost=10,scale=F)
plot(svmfit,dat)
svmfit=svm(y~.,data=dat,kernel='linear',cost=1,scale=F)
plot(svmfit,dat)
summary(svmfit)
tune.out=tune(svm,y~.,data=dat,kernel='linear',range=list(cost=c(0.001,0.01,0.1,1,5,10,100)))
summary(tune.out$best.model)
plot(summary(tune.out$best.model),dat)
svmfit=svm(y~.,data=dat,kernel='linear',cost=1,scale=F,gamma=0.3)
plot(svmfit,dat)
ypred=predict(svmfit,x)
names(ypred)
ypred=predict(svmfit,dat)
xtest=matrix(rnorm(20*2),ncol=2)
xtest[y==1]=xtest[y==1]+1
testdat=data.frame(x=xtest,y=y)
ypred=predict(svmfit,testdat)
ypred=predict(tune.out$best.model,testdat)
ypred
ypred=predict(svmfit,testdat)
ypred
table(ypred,y)
svmfit2=svm(y~.,data=dat,kernel='radial',gamma=1,cost=1)
plot(svmfit2,dat)
library(R)
install.packages("R")
pr.out(dat,scale=T)
pr.out=prcomp(dat,scale=T)
pr.out=prcomp(x,scale=T)
summary(pr.out)
pr.out$rotation
a=list['a',1,'b',2]
a=list[c('a',1,'b',2]
a<-list(1,2,"x","y")
a[is.character(a)]
is.character(a)
sapply(is.character,a)
sapply(啊，is.character)
sapply(a,is.character)
a[sapply(a,is.character)]
?sapply
a=' ddse'
a==[ ]*
library(Hmisc)
setwd("~/Desktop/earthquake/code")
data=read.csv('../data/all_month.csv',sep=",",header=TRUE)
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
str(data)
dt$time=strptime(dt$time,format="%Y-%m-%dT%%H:%M:%s%A")
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
dt$time_=strptime(dt$time,format="%Y-%m-%dT%%H:%M:%s%A")
View(dt)
data=read.csv('../data/all_month.csv',sep=",",header=TRUE)
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
summary(dt)
View(dt)
?strptime()
d=dt[1,2]
d
d=dt[1,1]
d
strptime(d)
strptime(d,format="%Y-%m-%d %H:%M:%s")
strsplit(d)
strsplit(d,'T')
d
strsplit(as.character(d),'T')
strsplit(as.character(d),c('T','.'))
s=strsplit(as.character(d),'T')
s[]2
s[2]
s[1,2]
s
substr(as.character(d),1,10)
dt$time=as.character(dt$time)
dt$day=substr(dt$time,1,10)
View(dt)
substr(as.character(d),11,19)
substr(as.character(d),12,19)
dt$hour=substr(dt$time,12,19)
new.time=paste(day,' ',hour)
day=substr(dt$time,1,10)
hour=substr(dt$time,12,19)
new.time=paste(day,' ',hour)
new.time_=strptime(new.time,format="%Y-%m-%d %H:%M:%s")
fix(new.time_)
data=read.csv('../data/all_month.csv',sep=",",header=TRUE)
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
dt$time=as.character(dt$time)
day=substr(dt$time,1,10)
hour=substr(dt$time,12,19)
new.time=paste(day,' ',hour)
dt$time_=strptime(new.time,format="%Y-%m-%d %H:%M:%s")
min(dt$time_)
max(dt$time_)
fix(new.time)
new.time=paste(day,hour)
dt$time_=strptime(new.time,format="%Y-%m-%d %H:%M:%s")
min(dt$time_)
max(dt$time_)
fix(new.time)
dt$time_=strptime(as.factor(new.time),format="%Y-%m-%d %H:%M:%s")
min(dt$time_)
max(dt$time_)
dt$time_=strptime(new.time,format="%Y-%m-%d %H:%M:%S")
min(dt$time_)
max(dt$time_)
new.time[1]
## load the data from the data file
setwd("~/Desktop/my_documents/coursera/fall_2015/exploratory_data_analysis/project_1")
classes=c("character","character",rep("numeric",7))
fulldata=read.table('./household_power_consumption.txt',colClasses=classes,na.strings=c('?'),sep=';',header=TRUE)
data=subset(fulldata,fulldata$Date %in% c("1/2/2007","2/2/2007"))
na.sum=sum(is.na(data));print(na.sum)
#### plot2 ####
## merge Date and Time
date.time<-NULL
for (i in 1:length(data$Time)) {
date.time=c(date.time,paste(data$Date[i],data$Time[i],sep=" "))
}
## plot and save the figure
date.time=strptime(date.time,"%d/%m/%Y %H:%M:%S")
gap=data$Global_active_power
plot(date.time,gap,xlab="",ylab="Global Active Power (kilowatts)",type="l")
dev.copy(png,file="./plot2.png",width=480,height=480)
dev.off()
View(data)
library(Hmisc)
setwd("~/Desktop/earthquake/code")
data=read.csv('../data/all_month.csv',sep=",",header=TRUE)
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
dt$time=as.character(dt$time)
day=substr(dt$time,1,10)
hour=substr(dt$time,12,19)
new.time=paste(day,hour)
fix(new.time)
dt$time_=strptime(new.time,format="%Y-%m-%d %H:%M:%S")
min(dt$time_)
max(dt$time_)
d=new.time[1]
d
strptime(d,format="%Y-%m-%d %H:%M:%S")
View(dt)
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
dt$time=as.character(dt$time)
day=substr(dt$time,1,10)
hour=substr(dt$time,12,19)
new.time=paste(day,hour)
dt$time=strptime(new.time,format="%Y-%m-%d %H:%M:%S")
summary(dt)
min(dt$time)
max(dt$time)
plot(dt$time, dt$mag, pch = 19)
plot(dt$time, dt$mag, pch = 9)
plot(dt$time, dt$mag, pch = 19,cex=2)
plot(dt$time, dt$mag, pch = 19,cex=1)
plot(dt$time, dt$mag, pch = 19,cex=0.5)
dt=subset(dt,dt$type=='earthquake')
data=read.csv('../data/all_month.csv',sep=",",header=TRUE)
dt=data[complete.cases(data),] ## remove the rows containing missing values
dt=subset(dt,dt$type=='earthquake')
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
dt$time=as.character(dt$time)
day=substr(dt$time,1,10)
hour=substr(dt$time,12,19)
new.time=paste(day,hour)
dt$time=strptime(new.time,format="%Y-%m-%d %H:%M:%S")
summary(dt)
data=read.csv('../data/all_month.csv',sep=",",header=TRUE)
dt=data[complete.cases(data),] #
dt=subset(dt,dt$type=='earthquake')
dt$latCut <- cut2(dt$latitude, g = 5)
dt$lonCut <- cut2(dt$longitude, g = 5)
dt$nstCut <- cut2(dt$nst, g = 5)
dt$log10Depth <- log10(dt$depth-min(dt$depth)+1)
dt$time=as.character(dt$time)
day=substr(dt$time,1,10)
hour=substr(dt$time,12,19)
new.time=paste(day,hour)
dt$time=strptime(new.time,format="%Y-%m-%d %H:%M:%S")
summary(dt)
plot(dt$time, dt$mag, pch = 19,cex=0.5)
plot(dt$time, dt$depth, pch = 19,cex=0.5)
mean(quakes$Magnitude < 3)
mean(quakes$mag < 3)
sum(quakes$mag < 3)
mean(dt$mag < 3)
mean(quakes$Magnitude > 3 & quakes$Magnitude < 5)
mean(dt$mag > 3 & dt$mag < 5)
hist(quakes$Depth, col = "grey")
hist(dt$depth, col = "grey")
hist(dt$depth, col = "grey",main="Histgram of the Distribution of depths",
xlab="depth",ylab="frequency")
hist(dt$log10Depth, col = "grey",main="Histgram of the Distribution of log 10 based Depths",
xlab="depth",ylab="frequency")
lm.no.adjust <- lm(dt$mag ~ dt$log10Depth)
par(mfrow = c(1, 3))
plot(dt$log10Depth, lm.no.adjust$residuals, col = dt$latCut, pch = 19)
plot(dt$log10Depth, lm.no.adjust$residuals, col = dt$lonCut, pch = 19)
plot(dt$log10Depth, lm.no.adjust$residuals, col = dt$nstCut, pch = 19)
lm.final <- lm($mag ~ dt$log10Depth + dt$latCut + dt$lonCut + dt$nst)
par(mfrow = c(1, 3))
plot(dt$log10Depth, lm.final$residuals, col = dt$latCut, pch = 19)
plot(dt$log10Depth, lm.final$residuals, col = dt$lonCut, pch = 19)
plot(dt$log10Depth, lm.final$residuals, col = dt$nstCut, pch = 19)
lm.final <- lm($mag ~ dt$log10Depth + dt$latCut + dt$lonCut + dt$nst)
lm.final <- lm(dt$mag ~ dt$log10Depth + dt$latCut + dt$lonCut + dt$nst)
par(mfrow = c(1, 3))
plot(dt$log10Depth, lm.final$residuals, col = dt$latCut, pch = 19)
plot(dt$log10Depth, lm.final$residuals, col = dt$lonCut, pch = 19)
plot(dt$log10Depth, lm.final$residuals, col = dt$nstCut, pch = 19)
summary(lm.final)
confint(lm.final)
n.row
?n.rows()
print(num.na)
num.missing.values=sum(~complete.cases(data))
complete.cases(data)
sum(~complete.cases(data))
sum(ass.numerical(~complete.cases(data)))
sum(ass.numeric(~complete.cases(data)))
sum(as.numeric(~complete.cases(data)))
sum(as.numerical(~complete.cases(data)))
